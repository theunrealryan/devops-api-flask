## DevOps API Flask 🚀

[![pipeline status](https://gitlab.com/devops-api-flask/devops-api-flask/badges/main/pipeline.svg)](https://gitlab.com/devops-api-flask/devops-api-flask/-/pipelines)
[![coverage report](https://gitlab.com/devops-api-flask/devops-api-flask/badges/main/coverage.svg)](https://gitlab.com/devops-api-flask/devops-api-flask/-/graphs/main/charts)

Uma API de gerenciamento de tarefas escrita em **Flask**, empacotada em **Docker** e orquestrada com **Docker Compose** (local), **Docker Swarm** (produção) e **GitLab CI/CD** (pipeline).

> *“Build once, run everywhere”* — código, testes, container, deploy e monitoramento em um fluxo contínuo.

---

### ✨ Funcionalidades

* **CRUD de tarefas** em JSON via rota `/tasks`
* **Testes automatizados** com `pytest` e cobertura ≥ 80%
* **Imagem Docker multi-stage** para build enxuto e seguro
* **Ambiente local** com Docker Compose
* **Escalonamento** e **rolling updates** em Docker Swarm
* **Pipeline GitLab CI/CD**: build, test, push e deploy

---

### 🏗️ Pré-requisitos

| Ferramenta     | Versão mínima | Observações                        |
| -------------- | ------------- | ---------------------------------- |
| Python         | 3.11          | Recomenda-se virtualenv/venv       |
| Docker Engine  | 26.x          |                                    |
| Docker Compose | v2            | Plugin integrado no Docker Desktop |
| GitLab Runner  | 17.x          | Com Docker-in-Docker habilitado    |

---

### 🗂️ Estrutura do Projeto

```
taskboard/
├── app.py               # Código principal da API Flask
├── requirements.txt     # Dependências Python
├── Dockerfile           # Multi-stage build
├── docker-compose.yml   # Ambiente local
├── .gitlab-ci.yml       # Pipeline GitLab CI/CD
├── pytest.ini           # Configuração do pytest & cobertura
└── tests/               # Testes automatizados (pytest)
    └── test_api.py
```

---

### 🚀 Desenvolvimento Local

```bash
# 1. Clone o repositório
git clone https://gitlab.com/devops-api-flask/devops-api-flask.git
cd devops-api-flask

# 2. Suba tudo com Compose
docker compose up --build -d

# 3. Teste a API
curl -X POST http://localhost:5000/tasks \
  -H "Content-Type: application/json" \
  -d '{"title":"Estudar DevOps"}'
curl http://localhost:5000/tasks
```

---

### 🐳 Imagem Docker (Multi-stage)

```dockerfile
# Build stage
FROM python:3.12-slim AS builder
WORKDIR /src
COPY requirements.txt .
RUN pip install --user -r requirements.txt

# Runtime stage
FROM python:3.12-alpine
WORKDIR /app
COPY --from=builder /root/.local /root/.local
COPY . .
ENV PATH="/root/.local/bin:$PATH"
CMD ["python", "app.py"]
```

---

### 🐝 Pipeline GitLab CI/CD

```yaml
stages:
  - build
  - test
  - deploy
  - mirror

variables:
  DOCKER_HOST: tcp://docker:2375

build:
  stage: build
  image: docker:latest
  services: [docker:dind]
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  only: [main]

test:
  stage: test
  image: python:3.12
  script:
    - pip install -r requirements.txt pytest pytest-cov
    - pytest --cov=app
  artifacts:
    paths: [htmlcov/]

deploy:
  stage: deploy
  when: manual
  script:
    - docker service update \
        --image "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" \
        taskboard_web

mirror:
  stage: mirror
  image: alpine/git
  before_script:
    - mkdir -p ~/.ssh
    - cp "$SSH_PRIVATE_KEY" ~/.ssh/id_ed25519_mirror
    - chmod 600 ~/.ssh/id_ed25519_mirror
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - git config --global core.sshCommand "ssh -i ~/.ssh/id_ed25519_mirror -o UserKnownHostsFile=$HOME/.ssh/known_hosts"
  script:
    - git remote add github ssh://git@github.com:theunrealryan/devops-api-flask.git || true
    - git push github main
  only: [main]
```

---

### ⚓ Deploy em Docker Swarm

```bash
# Inicie o Swarm (manager)
docker swarm init --advertise-addr <IP_MANAGER>

# Deploy da stack
docker stack deploy -c docker-compose.yml taskboard

# Escale réplicas
docker service scale taskboard_web=3

# Rolling update
docker service update \
  --image "$CI_REGISTRY_IMAGE:latest" \
  --update-delay 10s \
  taskboard_web
```

---

### 🧪 Testes e Cobertura

```bash
pip install -r requirements.txt pytest pytest-cov
pytest --cov=app
```

* Cobertura mínima: **80%**
* Relatórios em `htmlcov/` disponíveis como artifact no pipeline.

---

### 🤝 Contribuições

1. Fork & branch `feature/<nome>`
2. Commit & push
3. Abra Merge Request
4. Aguarde revisão

---

### 📜 Licença

MIT © [Ryan Ricardo de Souza](https://gitlab.com/theunrealryan)

---

*“Automate all the things, but understand each step.”*