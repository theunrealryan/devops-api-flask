name: Test, Build, and Deploy to Swarm

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: linux-amd64 # Usa o ambiente padrão do runner, que tem Node.js
    steps:
      - name: Checkout code
        # Esta etapa funciona porque o Node.js está presente.
        uses: actions/checkout@v3

      - name: Install Python and Dependencies
        # Adicionamos o Python e instalamos as dependências do projeto.
        run: |
          apt-get update
          apt-get install -y python3 python3-pip python3-venv
          # Usamos 'python3 -m pip' para garantir que estamos a usar o pip correto
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install ."[dev]"

      - name: Run tests with pytest
        # Usamos 'python3 -m pytest' para garantir que o pytest correto seja executado
        run: python3 -m pytest

  build-and-push:
    needs: test
    runs-on: linux-amd64 # Usa o mesmo ambiente padrão com Node.js
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        # Esta é a forma correta e oficial de preparar o ambiente para builds Docker.
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-api-flask:latest
          no-cache: true # Força um build limpo para garantir que as dependências corretas sejam usadas

  deploy:
    needs: build-and-push
    runs-on: linux-amd64
    steps:
      - name: Deploy to Swarm
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SWARM_HOST }}
          username: ${{ secrets.SWARM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /srv/docker/stacks/traefik-stack
            docker image pull ${{ secrets.DOCKERHUB_USERNAME }}/devops-api-flask:latest
            docker stack deploy -c docker-compose.yml traefik
            echo "Deploy finalizado com sucesso!"

